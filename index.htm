<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Casa Manager - Gestione Lavori Domestici</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            animation: gradientShift 10s ease infinite;
            background-size: 200% 200%;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            animation: slideDown 0.5s ease;
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        h1 {
            color: #764ba2;
            font-size: 3em;
            margin-bottom: 10px;
            text-align: center;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        .sync-status {
            text-align: center;
            margin: 10px 0;
            padding: 10px;
            background: linear-gradient(135deg, #56ab2f, #a8e063);
            color: white;
            border-radius: 10px;
            font-weight: bold;
        }

        .sync-status.error {
            background: linear-gradient(135deg, #ff6b6b, #ee5a6f);
        }

        .people-badges {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .person-badge {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 10px 20px;
            border-radius: 50px;
            font-weight: bold;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            transform: scale(1);
            transition: all 0.3s ease;
        }

        .person-badge:hover {
            transform: scale(1.1) rotate(5deg);
        }

        .add-task-btn {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 50px;
            font-size: 1.2em;
            font-weight: bold;
            cursor: pointer;
            margin: 20px auto;
            display: block;
            box-shadow: 0 10px 30px rgba(245, 87, 108, 0.4);
            transition: all 0.3s ease;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .add-task-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(245, 87, 108, 0.5);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            backdrop-filter: blur(5px);
            z-index: 1000;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 25px;
            padding: 40px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.5);
            animation: slideUp 0.5s ease;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .task-icons {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin: 25px 0;
        }

        .task-option {
            background: linear-gradient(135deg, #e0e0e0, #f5f5f5);
            border: 3px solid transparent;
            padding: 20px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .task-option:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }

        .task-option.selected {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            transform: scale(1.05);
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
        }

        .task-option .icon {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .task-option .label {
            font-weight: bold;
            font-size: 1.1em;
        }

        .people-selector {
            margin: 25px 0;
        }

        .people-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-top: 15px;
        }

        .person-btn {
            padding: 15px;
            border: 3px solid #ddd;
            background: white;
            border-radius: 15px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .person-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }

        .person-btn.main-selected {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: #667eea;
            animation: bounce 0.5s ease;
        }

        .person-btn.collab-selected {
            background: linear-gradient(135deg, #56ab2f, #a8e063);
            color: white;
            border-color: #56ab2f;
        }

        @keyframes bounce {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .datetime-input {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
        }

        input[type="date"], input[type="time"] {
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 10px;
            font-size: 1em;
            transition: all 0.3s ease;
        }

        input[type="date"]:focus, input[type="time"]:focus {
            border-color: #667eea;
            outline: none;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .submit-btn {
            background: linear-gradient(135deg, #56ab2f, #a8e063);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            width: 100%;
            margin-top: 20px;
            box-shadow: 0 10px 30px rgba(86, 171, 47, 0.3);
            transition: all 0.3s ease;
        }

        .submit-btn:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(86, 171, 47, 0.4);
        }

        .submit-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .cancel-btn {
            background: #e0e0e0;
            color: #333;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
            width: 100%;
            margin-top: 10px;
            transition: all 0.3s ease;
        }

        .cancel-btn:hover {
            background: #d0d0d0;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 50px rgba(0,0,0,0.2);
        }

        .stat-card.leader {
            background: linear-gradient(135deg, #FFD700, #FFA500);
            color: white;
        }

        .stat-card .crown {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 2em;
            animation: rotate 3s ease infinite;
        }

        @keyframes rotate {
            0%, 100% { transform: rotate(-10deg); }
            50% { transform: rotate(10deg); }
        }

        .stat-card h3 {
            font-size: 1.5em;
            margin-bottom: 20px;
            color: #333;
        }

        .stat-card.leader h3 {
            color: white;
        }

        .stat-details {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .stat-row {
            display: flex;
            justify-content: space-between;
            padding: 8px;
            background: rgba(0,0,0,0.05);
            border-radius: 10px;
        }

        .leader .stat-row {
            background: rgba(255,255,255,0.2);
        }

        .stat-number {
            font-weight: bold;
            font-size: 1.2em;
            color: #667eea;
        }

        .leader .stat-number {
            color: white;
        }

        .tasks-list {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.2);
            max-height: 600px;
            overflow-y: auto;
        }

        .task-item {
            background: linear-gradient(135deg, #f5f5f5, #e0e0e0);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
            border-left: 5px solid #667eea;
            animation: slideIn 0.5s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .task-item:hover {
            transform: translateX(10px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }

        .task-info {
            flex: 1;
        }

        .task-type {
            font-size: 1.3em;
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }

        .task-meta {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            align-items: center;
        }

        .task-person {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
        }

        .task-collaborator {
            background: linear-gradient(135deg, #56ab2f, #a8e063);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
        }

        .task-time {
            color: #666;
            font-size: 0.9em;
        }

        .delete-btn {
            background: linear-gradient(135deg, #f5576c, #f093fb);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .delete-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 10px 20px rgba(245, 87, 108, 0.3);
        }

        .report-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.2);
        }

        .report-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .report-filters {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 10px 20px;
            border: 2px solid #667eea;
            background: white;
            border-radius: 25px;
            color: #667eea;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .filter-btn:hover {
            background: #667eea;
            color: white;
            transform: scale(1.05);
        }

        .filter-btn.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: transparent;
        }

        .summary-box {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 20px;
            padding: 30px;
            margin-top: 25px;
            text-align: center;
            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.3);
        }

        .summary-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .summary-stat {
            padding: 15px;
            background: rgba(255,255,255,0.2);
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }

        .summary-stat .number {
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .summary-stat .label {
            font-size: 0.9em;
            opacity: 0.9;
        }

        .empty-state {
            text-align: center;
            padding: 60px;
            color: #999;
        }

        .empty-state .icon {
            font-size: 5em;
            margin-bottom: 20px;
            opacity: 0.3;
        }

        .info-box {
            background: linear-gradient(135deg, #4CAF50, #8BC34A);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: center;
            font-weight: bold;
            box-shadow: 0 10px 30px rgba(76, 175, 80, 0.3);
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        ::-webkit-scrollbar {
            width: 10px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #764ba2;
        }

        @media (max-width: 768px) {
            h1 { font-size: 2em; }
            .stats-grid { grid-template-columns: 1fr; }
            .people-grid { grid-template-columns: 1fr; }
            .task-icons { grid-template-columns: 1fr; }
            .datetime-input { grid-template-columns: 1fr; }
            .report-header { flex-direction: column; }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🏠 Casa Manager</h1>
            <div class="sync-status" id="syncStatus">🔄 Connessione a Firebase...</div>
            <div class="people-badges">
                <div class="person-badge">Francesco</div>
                <div class="person-badge">Sofia</div>
                <div class="person-badge">Giovanni</div>
                <div class="person-badge">Veronica</div>
            </div>
            <button class="add-task-btn" onclick="openModal()">
                ✨ Aggiungi Nuovo Lavoro ✨
            </button>
        </div>

        <!-- Report Section -->
        <div class="report-section">
            <div class="report-header">
                <h2>📊 Report & Statistiche</h2>
                <div class="report-filters">
                    <button class="filter-btn active" onclick="setReportPeriod('settimana', this)">Settimana</button>
                    <button class="filter-btn" onclick="setReportPeriod('mese', this)">Mese</button>
                    <button class="filter-btn" onclick="setReportPeriod('anno', this)">Anno</button>
                </div>
            </div>
            
            <div class="stats-grid" id="statsGrid">
                <div class="loading">Caricamento statistiche...</div>
            </div>

            <div class="summary-box">
                <h3>Riepilogo Generale</h3>
                <div class="summary-stats" id="summaryStats">
                    <div class="loading">Caricamento riepilogo...</div>
                </div>
            </div>
        </div>

        <!-- Tasks List -->
        <div class="tasks-list">
            <h2>📋 Cronologia Lavori</h2>
            <div id="tasksList">
                <div class="loading">Caricamento lavori...</div>
            </div>
        </div>

        <!-- Info Box -->
        <div class="info-box" id="infoBox">
            🚀 Sistema connesso a Firebase! Tutti vedono gli stessi dati in tempo reale!
        </div>
    </div>

    <!-- Modal -->
    <div class="modal" id="taskModal">
        <div class="modal-content">
            <h2>🎯 Registra Nuovo Lavoro</h2>
            
            <div class="task-icons" id="taskIcons">
                <div class="task-option" onclick="selectTask('Prendere l\'acqua', this)">
                    <div class="icon">💧</div>
                    <div class="label">Prendere l'acqua</div>
                </div>
                <div class="task-option" onclick="selectTask('Fare la spesa', this)">
                    <div class="icon">🛒</div>
                    <div class="label">Fare la spesa</div>
                </div>
                <div class="task-option" onclick="selectTask('Portare a spasso i cani', this)">
                    <div class="icon">🐕</div>
                    <div class="label">Portare a spasso i cani</div>
                </div>
                <div class="task-option" onclick="selectTask('Cucinare', this)">
                    <div class="icon">👨‍🍳</div>
                    <div class="label">Cucinare</div>
                </div>
            </div>

            <div class="people-selector">
                <h3>Chi ha fatto il lavoro?</h3>
                <div class="people-grid" id="mainPersonGrid">
                    <button class="person-btn" onclick="selectMainPerson('Francesco', this)">Francesco</button>
                    <button class="person-btn" onclick="selectMainPerson('Sofia', this)">Sofia</button>
                    <button class="person-btn" onclick="selectMainPerson('Giovanni', this)">Giovanni</button>
                    <button class="person-btn" onclick="selectMainPerson('Veronica', this)">Veronica</button>
                </div>
            </div>

            <div class="people-selector">
                <h3>Con chi? (Opzionale)</h3>
                <div class="people-grid" id="collabGrid">
                    <!-- Will be populated dynamically -->
                </div>
            </div>

            <div class="datetime-input">
                <input type="date" id="taskDate" value="">
                <input type="time" id="taskTime" value="">
            </div>

            <button class="submit-btn" id="submitBtn" onclick="submitTask()" disabled>
                ✅ Salva Lavoro
            </button>
            <button class="cancel-btn" onclick="closeModal()">
                Annulla
            </button>
        </div>
    </div>

    <!-- Firebase Scripts -->
    <script src="https://www.gstatic.com/firebasejs/10.8.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.8.0/firebase-database-compat.js"></script>
    
    <script>
        // Firebase Configuration - LA TUA CONFIGURAZIONE
        const firebaseConfig = {
            apiKey: "AIzaSyD-0deBcY-fa7dn1ujUC1DQRbTNl5MFP6A",
            authDomain: "casa-30989.firebaseapp.com",
            databaseURL: "https://casa-30989-default-rtdb.europe-west1.firebasedatabase.app",
            projectId: "casa-30989",
            storageBucket: "casa-30989.firebasestorage.app",
            messagingSenderId: "287591507370",
            appId: "1:287591507370:web:a965c5beedcb4cf81f37d3",
            measurementId: "G-PWHP7JVQL1"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();
        const tasksRef = database.ref('tasks');

        // Global State
        const state = {
            tasks: [],
            selectedTask: '',
            selectedMainPerson: '',
            selectedCollaborators: [],
            reportPeriod: 'settimana'
        };

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            setDefaultDateTime();
            setupRealtimeListener();
        });

        // Setup real-time listener for Firebase
        function setupRealtimeListener() {
            tasksRef.on('value', (snapshot) => {
                const data = snapshot.val();
                if (data) {
                    state.tasks = Object.entries(data).map(([id, task]) => ({
                        ...task,
                        id: id
                    }));
                } else {
                    state.tasks = [];
                }
                updateDisplay();
                updateSyncStatus(true);
            }, (error) => {
                console.error('Firebase error:', error);
                updateSyncStatus(false);
                // Fallback to localStorage
                loadLocalTasks();
            });
        }

        // Local storage fallback
        function loadLocalTasks() {
            const saved = localStorage.getItem('casaManagerTasks');
            if (saved) {
                state.tasks = JSON.parse(saved);
                updateDisplay();
            }
        }

        function saveLocalTasks() {
            localStorage.setItem('casaManagerTasks', JSON.stringify(state.tasks));
        }

        // Sync status indicator
        function updateSyncStatus(connected) {
            const statusEl = document.getElementById('syncStatus');
            const infoBox = document.getElementById('infoBox');
            
            if (connected) {
                statusEl.textContent = '✅ Connesso a Firebase - Sincronizzazione in tempo reale';
                statusEl.className = 'sync-status';
                infoBox.textContent = '🚀 Sistema connesso! Tutti vedono gli stessi dati in tempo reale!';
                infoBox.style.background = 'linear-gradient(135deg, #4CAF50, #8BC34A)';
            } else {
                statusEl.textContent = '⚠️ Modalità Offline - Dati salvati localmente';
                statusEl.className = 'sync-status error';
                infoBox.textContent = '📱 Modalità offline - I dati sono salvati solo su questo dispositivo';
                infoBox.style.background = 'linear-gradient(135deg, #ff6b6b, #ee5a6f)';
            }
        }

        // Modal functions
        function openModal() {
            document.getElementById('taskModal').classList.add('active');
            setDefaultDateTime();
        }

        function closeModal() {
            document.getElementById('taskModal').classList.remove('active');
            resetForm();
        }

        function setDefaultDateTime() {
            const now = new Date();
            document.getElementById('taskDate').value = now.toISOString().split('T')[0];
            document.getElementById('taskTime').value = now.toTimeString().slice(0, 5);
        }

        function selectTask(task, element) {
            state.selectedTask = task;
            document.querySelectorAll('.task-option').forEach(opt => opt.classList.remove('selected'));
            element.classList.add('selected');
            checkFormValidity();
        }

        function selectMainPerson(person, element) {
            state.selectedMainPerson = person;
            document.querySelectorAll('#mainPersonGrid .person-btn').forEach(btn => btn.classList.remove('main-selected'));
            element.classList.add('main-selected');
            
            updateCollaboratorsGrid(person);
            checkFormValidity();
        }

        function updateCollaboratorsGrid(excludePerson) {
            const people = ['Francesco', 'Sofia', 'Giovanni', 'Veronica'];
            const collabGrid = document.getElementById('collabGrid');
            collabGrid.innerHTML = '';
            
            people.filter(p => p !== excludePerson).forEach(person => {
                const btn = document.createElement('button');
                btn.className = 'person-btn';
                if (state.selectedCollaborators.includes(person)) {
                    btn.classList.add('collab-selected');
                }
                btn.textContent = person;
                btn.onclick = () => toggleCollaborator(person, btn);
                collabGrid.appendChild(btn);
            });
        }

        function toggleCollaborator(person, element) {
            const index = state.selectedCollaborators.indexOf(person);
            if (index > -1) {
                state.selectedCollaborators.splice(index, 1);
                element.classList.remove('collab-selected');
            } else {
                state.selectedCollaborators.push(person);
                element.classList.add('collab-selected');
            }
        }

        function checkFormValidity() {
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.disabled = !state.selectedTask || !state.selectedMainPerson;
        }

        // Submit task to Firebase
        function submitTask() {
            if (!state.selectedTask || !state.selectedMainPerson) return;
            
            const date = document.getElementById('taskDate').value;
            const time = document.getElementById('taskTime').value;
            
            const newTask = {
                task: state.selectedTask,
                mainPerson: state.selectedMainPerson,
                collaborators: [...state.selectedCollaborators],
                date: date,
                time: time,
                timestamp: new Date(`${date}T${time}`).getTime(),
                createdAt: firebase.database.ServerValue.TIMESTAMP
            };

            // Try to save to Firebase
            tasksRef.push(newTask)
                .then(() => {
                    showSuccessAnimation();
                    closeModal();
                })
                .catch((error) => {
                    console.error('Error saving to Firebase:', error);
                    // Fallback to local storage
                    newTask.id = Date.now();
                    newTask.createdAt = Date.now();
                    state.tasks.push(newTask);
                    saveLocalTasks();
                    updateDisplay();
                    showSuccessAnimation('Salvato localmente (offline)');
                    closeModal();
                });
        }

        // Delete task from Firebase
        function deleteTask(taskId) {
            if (!confirm('Sei sicuro di voler eliminare questo lavoro?')) return;
            
            tasksRef.child(taskId).remove()
                .catch((error) => {
                    console.error('Error deleting from Firebase:', error);
                    // Fallback to local deletion
                    state.tasks = state.tasks.filter(t => t.id !== taskId);
                    saveLocalTasks();
                    updateDisplay();
                });
        }

        function resetForm() {
            state.selectedTask = '';
            state.selectedMainPerson = '';
            state.selectedCollaborators = [];
            document.querySelectorAll('.task-option').forEach(opt => opt.classList.remove('selected'));
            document.querySelectorAll('.person-btn').forEach(btn => {
                btn.classList.remove('main-selected');
                btn.classList.remove('collab-selected');
            });
            document.getElementById('collabGrid').innerHTML = '';
            checkFormValidity();
        }

        // Report functions
        function setReportPeriod(period, button) {
            state.reportPeriod = period;
            document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            updateDisplay();
        }

        function getFilteredTasks() {
            const now = new Date();
            let startDate;
            
            switch(state.reportPeriod) {
                case 'settimana':
                    startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                    break;
                case 'mese':
                    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
                    break;
                case 'anno':
                    startDate = new Date(now.getFullYear(), 0, 1);
                    break;
                default:
                    startDate = new Date(0);
            }
            
            return state.tasks.filter(task => task.timestamp >= startDate.getTime());
        }

        function getStatistics() {
            const filtered = getFilteredTasks();
            const people = ['Francesco', 'Sofia', 'Giovanni', 'Veronica'];
            const stats = {};
            
            people.forEach(person => {
                stats[person] = {
                    totale: 0,
                    solo: 0,
                    conAltri: 0,
                    lavori: {}
                };
            });
            
            filtered.forEach(task => {
                // Main person stats
                stats[task.mainPerson].totale++;
                if (task.collaborators.length === 0) {
                    stats[task.mainPerson].solo++;
                } else {
                    stats[task.mainPerson].conAltri++;
                }
                
                if (!stats[task.mainPerson].lavori[task.task]) {
                    stats[task.mainPerson].lavori[task.task] = 0;
                }
                stats[task.mainPerson].lavori[task.task]++;
                
                // Collaborators stats
                task.collaborators.forEach(person => {
                    stats[person].totale++;
                    stats[person].conAltri++;
                    if (!stats[person].lavori[task.task]) {
                        stats[person].lavori[task.task] = 0;
                    }
                    stats[person].lavori[task.task]++;
                });
            });
            
            return stats;
        }

        // Display functions
        function updateDisplay() {
            updateStats();
            updateTasksList();
            updateSummary();
        }

        function updateStats() {
            const stats = getStatistics();
            const people = ['Francesco', 'Sofia', 'Giovanni', 'Veronica'];
            const leader = people.reduce((a, b) => stats[a].totale > stats[b].totale ? a : b);
            
            const statsGrid = document.getElementById('statsGrid');
            statsGrid.innerHTML = '';
            
            people.forEach(person => {
                const isLeader = person === leader && stats[person].totale > 0;
                const card = document.createElement('div');
                card.className = `stat-card ${isLeader ? 'leader' : ''}`;
                
                const tasksList = Object.entries(stats[person].lavori)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 3)
                    .map(([task, count]) => `<div style="font-size: 0.9em; opacity: 0.8; margin-top: 5px;">${getTaskIcon(task)} ${task}: ${count}</div>`)
                    .join('');
                
                card.innerHTML = `
                    ${isLeader ? '<div class="crown">👑</div>' : ''}
                    <h3>${person}</h3>
                    <div class="stat-details">
                        <div class="stat-row">
                            <span>Totale lavori:</span>
                            <span class="stat-number">${stats[person].totale}</span>
                        </div>
                        <div class="stat-row">
                            <span>Da solo:</span>
                            <span class="stat-number">${stats[person].solo}</span>
                        </div>
                        <div class="stat-row">
                            <span>Con altri:</span>
                            <span class="stat-number">${stats[person].conAltri}</span>
                        </div>
                        ${tasksList ? `<div style="margin-top: 15px; padding-top: 15px; border-top: 2px solid rgba(0,0,0,0.1);">${tasksList}</div>` : ''}
                    </div>
                `;
                statsGrid.appendChild(card);
            });
        }

        function updateTasksList() {
            const tasksList = document.getElementById('tasksList');
            const sortedTasks = [...state.tasks].sort((a, b) => b.timestamp - a.timestamp);
            
            if (sortedTasks.length === 0) {
                tasksList.innerHTML = `
                    <div class="empty-state">
                        <div class="icon">🏠</div>
                        <h3>Nessun lavoro registrato</h3>
                        <p>Inizia ad aggiungere i lavori domestici!</p>
                    </div>
                `;
                return;
            }
            
            tasksList.innerHTML = sortedTasks.map(task => {
                const date = new Date(task.timestamp);
                const dateStr = date.toLocaleDateString('it-IT', { weekday: 'short', day: 'numeric', month: 'short' });
                const timeStr = task.time;
                
                return `
                    <div class="task-item">
                        <div class="task-info">
                            <div class="task-type">${getTaskIcon(task.task)} ${task.task}</div>
                            <div class="task-meta">
                                <span class="task-person">${task.mainPerson}</span>
                                ${task.collaborators.map(c => `<span class="task-collaborator">+ ${c}</span>`).join('')}
                                <span class="task-time">📅 ${dateStr} - 🕐 ${timeStr}</span>
                            </div>
                        </div>
                        <button class="delete-btn" onclick="deleteTask('${task.id}')">🗑️</button>
                    </div>
                `;
            }).join('');
        }

        function updateSummary() {
            const filtered = getFilteredTasks();
            const stats = getStatistics();
            const people = ['Francesco', 'Sofia', 'Giovanni', 'Veronica'];
            const leader = people.reduce((a, b) => stats[a].totale > stats[b].totale ? a : b);
            
            const collaborativeTasks = filtered.filter(t => t.collaborators.length > 0).length;
            const soloTasks = filtered.filter(t => t.collaborators.length === 0).length;
            
            const summaryStats = document.getElementById('summaryStats');
            summaryStats.innerHTML = `
                <div class="summary-stat">
                    <div class="number">${filtered.length}</div>
                    <div class="label">Lavori Totali</div>
                </div>
                <div class="summary-stat">
                    <div class="number">${stats[leader].totale > 0 ? leader : '-'}</div>
                    <div class="label">Più Attivo</div>
                </div>
                <div class="summary-stat">
                    <div class="number">${collaborativeTasks}</div>
                    <div class="label">In Collaborazione</div>
                </div>
                <div class="summary-stat">
                    <div class="number">${soloTasks}</div>
                    <div class="label">Individuali</div>
                </div>
            `;
        }

        function getTaskIcon(task) {
            const icons = {
                "Prendere l'acqua": "💧",
                "Fare la spesa": "🛒",
                "Portare a spasso i cani": "🐕",
                "Cucinare": "👨‍🍳"
            };
            return icons[task] || "📌";
        }

        function showSuccessAnimation(message = 'Lavoro registrato con successo!') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #56ab2f, #a8e063);
                color: white;
                padding: 20px 30px;
                border-radius: 15px;
                font-weight: bold;
                font-size: 1.1em;
                box-shadow: 0 10px 30px rgba(86, 171, 47, 0.4);
                animation: slideIn 0.5s ease;
                z-index: 10000;
            `;
            notification.textContent = '✅ ' + message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.animation = 'fadeOut 0.5s ease';
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 500);
            }, 3000);
        }

        // Add fade out animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeOut {
                from { opacity: 1; transform: translateX(0); }
                to { opacity: 0; transform: translateX(100px); }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>
